
#define POTENCY 75

void leftMotor(int angle){
      RotateMotor(OUT_A, POTENCY, angle);
}

void rightMotor(int angle){
      RotateMotor(OUT_C, POTENCY, angle);
}

void bothMotorsAhead(int angle){
  int startingRotation = MotorRotationCount(OUT_C);
  OnFwdSync(OUT_AC, POTENCY, 0);
  until(MotorRotationCount(OUT_C) > startingRotation + angle);
  OffEx(OUT_AC, RESET_ALL);
  Wait(300);
}

void bothMotorsBack(int angle){
  int startingRotation = MotorRotationCount(OUT_C);
  OnFwdSync(OUT_AC, -POTENCY, 0);
  until(MotorRotationCount(OUT_C) < startingRotation - angle);
  OffEx(OUT_AC, RESET_ALL);
  Wait(300);
}

void goAhead(unsigned int distance){

	//float factor = 2000 / 30.5; >>>> antigo
  float factor = 360/10.75;
	bothMotorsAhead(distance * factor);
	TextOut(0,0,"Andando pra frente");

}

void goBack(unsigned int distance){
	
	//float factor = 2000 / 30.5; >>>> antigo
  float factor = 360/10.75;
	bothMotorsBack( distance * factor);
	TextOut(0,0,"Andando pra traz");

}

void turnRight(unsigned int angle){
	float factor = 360 / 62.7;
	int startingRotation = MotorRotationCount(OUT_C);
  OnFwdSync(OUT_AC, POTENCY, 100);
  until(MotorRotationCount(OUT_C) > startingRotation + angle * factor);
  OffEx(OUT_AC, RESET_ALL);
  Wait(300);
}

void turnLeft(unsigned int angle){
	float factor = 360 / 62.7;
	int startingRotation = MotorRotationCount(OUT_A);
  OnFwdSync(OUT_AC, POTENCY, -100);
  until(MotorRotationCount(OUT_A) > startingRotation + angle * factor);
  OffEx(OUT_AC, RESET_ALL);
  Wait(300);
}

void mustStop(){

 OffEx(OUT_AC, RESET_ALL);

}


